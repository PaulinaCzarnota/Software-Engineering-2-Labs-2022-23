model Library

enum BookStatus { available, unavailable, onreserve}


class Book
    attributes
        title : String
        author : String
        status : BookStatus init = #available
        no_copies : Integer init = 2
        no_onshelf : Integer init = 2
  
    operations
        borrow()
        begin
            self.no_onshelf := self.no_onshelf - 1;
            if (self.no_onshelf = 0) then 
                self.status := #unavailable 
            end
        end      
        
        return() begin
            self.no_onshelf := self.no_onshelf + 1;
            self.status := #available
        end 
        post: no_onshelf = no_onshelf@pre + 1
    
    statemachines
        psm States
        states                        
            newTitle : initial
            available       [no_onshelf > 0]
            unavailable     [no_onshelf = 0]
        transitions
            newTitle ->  available  { create }
            available -> unavailable { [no_onshelf = 1] borrow() }
            available -> available { [no_onshelf > 1] borrow() }
            available -> available { return() }
            unavailable -> available { return() }
        end
end

class Copy
  attributes
    --status : CopyStatus init = #onShelf
  operations
    return()
    begin
        --self.status := #onShelf;
        self.book.return()
    end
    
    reserve()
    
    borrow( m : Member)
    begin
        --self.status := #onLoan;
        self.book.borrow()
    end
    
    statemachines
        psm States
        states
            newTitle : initial
            onLoan
            onShelf
            onreserve
        transitions
            newTitle -> onShelf { create }
            onShelf -> onLoan { borrow() }
            onLoan -> onShelf { return() }
            onShelf -> onreserve { reserve() }
            onreserve -> onLoan { borrow() }
        end
    
end    
    
class Member 
  attributes 
    name : String
    address : String
    no_onloan : Integer
    status : String
    fine : Integer
  operations
    okToBorrow() : Boolean 
    begin
      if (self.no_onloan < 2) then
        result := true
      else 
        result := false
      end
    end
    

    borrow(c : Copy)
    begin
        declare ok : Boolean;
        ok := self.okToBorrow();
        if( ok ) then
            insert (self, c) into HasBorrowed;
            self.no_onloan := self.no_onloan + 1;
            c.borrow(self)
        end
    end           
    
    return(c : Copy)
    begin
        delete (self, c) from HasBorrowed;
        self.no_onloan := self.no_onloan - 1;
        c.return()
    end
    
end    

association HasBorrowed between
    Member[0..1] role borrower
    Copy[*] role borrowed
end

association CopyOf between
    Copy[1..*] role copies
    Book[1] role book
end
  
constraints

context Member::borrow(c:Copy) 
    pre limit: self.no_onloan < 2
    pre cond1: self.borrowed->excludes(c)
    post cond2: self.borrowed->includes(c)
    
    
    